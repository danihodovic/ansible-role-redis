---
- include_tasks: ./facts.yml

- name: Assert facts
  assert:
    that:
      - redis_network_range is defined
      - redis_primary is defined

- name: Gather Redis master IP
  setup:
  delegate_to: '{{ redis_primary }}'
  delegate_facts: true

- name: Set Redis master IP
  set_fact:
    redis_primary_ip: "{{ hostvars[redis_primary].ansible_all_ipv4_addresses | ipaddr(redis_network_range) | max }}"

- name: Create Sentinel dir
  file:
    state: directory
    path: /opt/sentinel
    recurse: true

- name: Template Sentinel config
  register: template_config
  template:
    src: sentinel.conf
    dest: /opt/sentinel/sentinel.conf
    mode: 0666

- name: Pull Sentinel container
  docker_image:
    source: pull
    name: redis:latest

- name: Start Sentinel
  docker_container:
    comparisons:
      '*': strict
    image: redis:latest
    name: sentinel
    restart_policy: unless-stopped
    restart: '{{ template_config.changed }}'
    entrypoint: ''
    command: redis-server /opt/sentinel/sentinel.conf --sentinel
    memory: '{{ ansible_memory_mb.real.total * 0.1 }}m'
    cpu_shares: '{{ (1024 * 0.1) | int }}'
    network_mode: host
    volumes:
      - '/opt/sentinel:/opt/sentinel'

- include_tasks: ./wait_for_port.yml
  vars:
    port: 26379

- name: Check sentinel status
  changed_when: false
  shell: 'docker exec sentinel redis-cli -p 26379 INFO'
  retries: 10
  delay: 1
  register: _health
  until: "'status=ok' in _health.stdout"
